package combination;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

/**
 * Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

	The same repeated number may be chosen from C unlimited number of times.
	
	Note:
	All numbers (including target) will be positive integers.
	Elements in a combination (a1, a2, ¡­ , ak) must be in non-descending order. (ie, a1 ¡Ü a2 ¡Ü ¡­ ¡Ü ak).
	The solution set must not contain duplicate combinations.
	For example, given candidate set 2,3,6,7 and target 7, 
	A solution set is: 
	[7] 
	[2, 2, 3] 
 * @author Haolin
 *
 */
public class Combination_sum {
	 public List<List<Integer>> solution(int[] candidates, int target) {
	        List<Integer> res = new ArrayList<Integer>();
	        List<List<Integer>> result = new ArrayList<List<Integer>>();
	        Arrays.sort(candidates);
	        dfs(candidates,target,0,res,result);
	        return result;
	    }
	    
	    public void dfs(int[] nums, int target, int index, List<Integer> res,List<List<Integer>> result){
	        if(target<0) return ;
	        if(target==0) {
	        	res.add(nums[index]);
	        	result.add(res);
	        	return ;
	        }
	       
	        for(int i=index;i<nums.length;i++){
	        	 res.add(nums[i]);
	        	 dfs(nums,target-nums[i],i,res,result);
	             res.remove(res.size()-1);
	        }
	 
	    }
	    
	    @Test
	    public void test(){
	    	Combination_sum demo = new Combination_sum();
	    	int[] nums = {2,3,6,7};
	    	System.out.print(demo.solution(nums, 7));
	    }
	    
}
